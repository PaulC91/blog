<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Paul Campbell</title>
    <link>/categories/r/</link>
    <description>Recent content in R on Paul Campbell</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Feb 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tidying Multi-Header Excel Data with R</title>
      <link>/2019/02/01/tidying-multi-header-excel-data-with-r/</link>
      <pubDate>Fri, 01 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/02/01/tidying-multi-header-excel-data-with-r/</guid>
      <description>Problem If you’re lucky enough to work with a lot of data that arrives in the form of excel tables, you will most likely be familiar with data in the format below.
This format makes it easier for a human eye to read the data, but seriously hinders a computers ability to analyse it. So, if you prefer analysing and visualising your data with a programming language rather than staring at it in Excel we’re going to need to knock it into a tidier form before we can let the powers of R loose on it.</description>
    </item>
    
    <item>
      <title>Introducing shinyauthr</title>
      <link>/2018/11/04/introducing-shinyauthr/</link>
      <pubDate>Sun, 04 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/11/04/introducing-shinyauthr/</guid>
      <description>I’ve been using R &amp;amp; shiny for a couple of years now. By default, that means I’ve been taking advantage of the countless open-source packages provided by the generous community of R developers. The ever-growing number of packages is making it possible to do just about anything you’d want to with R which is making someone like myself’s job easier and easier every day - so thanks to all the package developers for their efforts!</description>
    </item>
    
    <item>
      <title>D3 Sankey Diagrams from tidy data frames in R</title>
      <link>/2018/03/01/sankey/</link>
      <pubDate>Thu, 01 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/03/01/sankey/</guid>
      <description>Get the data in the format we want
library(tidyverse) library(tidygraph) library(igraph) library(networkD3) # https://www.kaggle.com/unitednations/refugee-data/data asylum_seekers_raw &amp;lt;- read_csv(&amp;quot;../../data/asylum_seekers.csv&amp;quot;) %&amp;gt;% rename(Destination = `Country / territory of asylum/residence`) # get the top 10 countries of origin by &amp;#39;Total decisions&amp;#39; top_orig &amp;lt;- asylum_seekers_raw %&amp;gt;% filter(Year == 2016) %&amp;gt;% group_by(Origin) %&amp;gt;% summarise(total = sum(`Total decisions`, na.rm = TRUE)) %&amp;gt;% top_n(10, total) %&amp;gt;% dplyr::pull(1) # get the top 10 countries of origin by &amp;#39;Total decisions&amp;#39; top_dest &amp;lt;- asylum_seekers_raw %&amp;gt;% filter(Year == 2016) %&amp;gt;% group_by(Destination) %&amp;gt;% summarise(total = sum(`Total decisions`, na.</description>
    </item>
    
  </channel>
</rss>